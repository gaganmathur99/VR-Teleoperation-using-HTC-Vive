//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ViveTracker/Tracker.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Tracker : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Tracker()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Tracker"",
    ""maps"": [
        {
            ""name"": ""ViveTracker"",
            ""id"": ""c8b56251-71f1-4df6-91ab-ae6b5a4799e9"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""33f13071-caaf-41b2-915c-77c5270e17c1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""0b6102e2-d7b2-4f23-89e4-e638631c2b06"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""77eb8d77-432f-4e6b-bef8-344d86ffc464"",
                    ""path"": ""<XRViveTracker>{Camera}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""144a131e-ff44-4d2a-8284-177d32dc0548"",
                    ""path"": ""<XRViveTracker>{Camera}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ViveTracker
        m_ViveTracker = asset.FindActionMap("ViveTracker", throwIfNotFound: true);
        m_ViveTracker_Position = m_ViveTracker.FindAction("Position", throwIfNotFound: true);
        m_ViveTracker_Rotation = m_ViveTracker.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ViveTracker
    private readonly InputActionMap m_ViveTracker;
    private IViveTrackerActions m_ViveTrackerActionsCallbackInterface;
    private readonly InputAction m_ViveTracker_Position;
    private readonly InputAction m_ViveTracker_Rotation;
    public struct ViveTrackerActions
    {
        private @Tracker m_Wrapper;
        public ViveTrackerActions(@Tracker wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_ViveTracker_Position;
        public InputAction @Rotation => m_Wrapper.m_ViveTracker_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_ViveTracker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ViveTrackerActions set) { return set.Get(); }
        public void SetCallbacks(IViveTrackerActions instance)
        {
            if (m_Wrapper.m_ViveTrackerActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_ViveTrackerActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_ViveTrackerActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_ViveTrackerActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_ViveTrackerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_ViveTrackerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_ViveTrackerActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_ViveTrackerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public ViveTrackerActions @ViveTracker => new ViveTrackerActions(this);
    public interface IViveTrackerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
